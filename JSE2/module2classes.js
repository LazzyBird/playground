// reminding of creating objects with constructor function
{
  let Vehicle = function (id, latitude, longitude) {
    this.setPosition = function (latitude, longitude) {
      this.time = Date.now();
      this.longitude = longitude;
      this.latitude = latitude;
    };
    this.id = id;
    this.status = "unavailable";
    this.time = Date.now();
    this.latitude = latitude;
    this.longitude = longitude;
  };
  let vehicle1 = new Vehicle("AL1024", 59.358615, 17.947589);
  vehicle1.setPosition(59.367647, 18.213451);
  console.log(vehicle1); // -> Vehicle {id: 'AL1024', status: 'unavailable', time: 1649347600000, latitude: 59.367647, longitude: 18.213451}
}
// refactoring of the above code
{
  let Vehicle = function (id, latitude, longitude) {
    this.setPosition = function (latitude, longitude) {
      this.time = Date.now();
      this.longitude = longitude;
      this.latitude = latitude;
    };
    this.id = id;
    this.status = "unavailable";
    this.setPosition(latitude, longitude);
  };
}
// –∞–±–æ —É –≤–∏–≥–ª—è–¥—ñ –¥–µ–∫–ª–∞—Ä–∞—Ü—ñ—ó –∫–ª–∞—Å—É:
{
  class Vehicle {
    constructor(id, latitude, longitude) {
      this.setPosition = function (latitude, longitude) {
        this.time = Date.now();
        this.longitude = longitude;
        this.latitude = latitude;
      };
      this.id = id;
      this.status = "unavailable";
      this.setPosition(latitude, longitude);
    }
  }
}
//what if we don't want to depend on the order of the fields?
{
  let Vehicle = function (initialData) {
    //The values will be recognized by their names, not by their order. The constructor accepts this object as the initialData parameter and decomposes it into individual fields. The following line:
    let { id, latitude, longitude } = initialData;
    // this is called destructuring assignment
    /* üîºthis line is actually nothing but:
let id = initialData.id;
let latitude = initialData.latitude;
let longitude = initialData.longitude;

      */
    this.setPosition = function (latitude, longitude) {
      this.time = Date.now();
      this.longitude = longitude;
      this.latitude = latitude;
    };
    this.id = id;
    this.status = "unavailable";
    this.setPosition(latitude, longitude);
  };
  let vehicle1 = new Vehicle({
    id: "AL1024",
    latitude: 59.367647,
    longitude: 18.213451
  });
  let vehicle2 = new Vehicle({
    longitude: 18.213423,
    latitude: 59.367628,
    id: "AL1024"
  });
}
// some new iterations of code - getting rid of redundant use of usage initialData object
{
  let Vehicle = function ({ id, latitude, longitude }) {
    this.setPosition = function ({ latitude, longitude }) {
      this.time = Date.now();
      this.longitude = longitude;
      this.latitude = latitude;
    };
    this.getPosition = function () {
      return {
        latitude: this.latitude,
        longitude: this.longitude
      };
    };
    this.id = id;
    this.status = "unavailable";
    this.setPosition({ latitude, longitude });
  };
  let vehicle1 = new Vehicle({
    id: "AL1024",
    latitude: 59.367647,
    longitude: 18.213451
  });
  let vehicle2 = new Vehicle({
    longitude: 18.213423,
    latitude: 59.367628,
    id: "AL1024"
  });
}

// finally classes wow
{
  class AlmostEmptyClass {
    constructor(sth) {
      console.log(sth);
    }
    sayHi() {
      console.log("Hi!");
    }
  }
  let almostEmptyObject = new AlmostEmptyClass(120); // -> 120
  almostEmptyObject.sayHi(); // -> Hi!
}
// another example
{
  // here is used constructor of class, some inmprovements and expalations in the next snippet
  class Vehicle {
    constructor({ id, latitude, longitude }) {
      this.setPosition = function ({ latitude, longitude }) {
        this.time = Date.now();
        this.longitude = longitude;
        this.latitude = latitude;
      };
      this.getPosition = function () {
        return {
          latitude: this.latitude,
          longitude: this.longitude
        };
      };
      this.id = id;
      this.status = "unavailable";
      this.setPosition({ latitude, longitude });
    }
  }
  let vehicle1 = new Vehicle({
    id: "AL1024",
    latitude: 59.367647,
    longitude: 18.213451
  });
  let vehicle2 = new Vehicle({
    longitude: 18.213423,
    latitude: 59.367628,
    id: "AL1024"
  });
}

// moving methods getPosition and setPosition are unnecessarily declared inside the constructor
{
  class Vehicle {
    constructor({ id, latitude, longitude }) {
      this.id = id;
      this.status = "unavailable";
      this.setPosition({ latitude, longitude });
    }
    setPosition({ latitude, longitude }) {
      this.time = Date.now();
      this.longitude = longitude;
      this.latitude = latitude;
    }
    getPosition() {
      return {
        latitude: this.latitude,
        longitude: this.longitude
      };
    }
  }
  let vehicle = new Vehicle({
    longitude: 18.213423,
    latitude: 59.367628,
    id: "AL1024"
  });
  vehicle.setPosition({ longitude: 18.193121, latitude: 59.378654 });
  console.log(vehicle.getPosition());
  //+ –Ω–µ–∑–≤–∞–∂–∞—é—á–∏ –Ω–∞ —Ç–µ —â–æ —á–∞—Å —Ñ—ñ–∫—Å—É—î—Ç—å—Å—è –≤ –º–æ–º–µ–Ω—Ç –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è .setPosition, –≤—ñ–Ω –Ω—ñ–¥–µ –Ω–µ –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è, —Ç–∞–∫ —â–æ –Ω–∞–≤—ñ—â–æ —Ü–µ —Ç—É—Ç - –≤–µ–ª–∏–∫–µ –ø–∏—Ç–∞–Ω–Ω—è. –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –¥–æ –æ–±'—î–∫—Ç–∞ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å –æ–∫—Ä–µ–º–æ –ø—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è vehicle.time = Date.now() —Ç–æ –≤–æ–Ω–æ –±—É–¥–µ —Ñ—ñ–∫—Å—É–≤–∞—Ç–∏ —á–∞—Å –¥–æ–≤–∞–≤–∞–Ω–Ω—è —Ü—ñ—î–π –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ –¥–æ –æ–±'—î–∫—Ç—É, –∞ –Ω–µ —á–∞—Å –≤–∏–∫–ª–∏–∫—É –º–µ—Ç–æ–¥–∞ .setPosition. –¢–∞–º –Ω–∏–∂—á–µ "–ø–æ–∫—Ä–∞—â–µ–Ω–∏–π" –∫–ª–∞—Å –∑ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—é –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —á–∞—Å—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è, —á–∞—Å—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó —Ç–∞ –º–µ—Ç–æ–¥–æ–º, —è–∫–∏–π –¥–æ–¥–∞—Å—Ç—å –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å —Ç–∞ —ó—ó –∑–Ω–∞—á–µ–Ω–Ω—è –ø—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä—É –∫–ª–∞—Å—É –¥–æ –Ω—å–æ–≥–æ –∂
}
{// —Å–ø—Ä–æ–±–∞ –ø–æ—Ñ—ñ–∫—Å–∏—Ç–∏ –±–µ–∑–≥–ª—É–∑–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —á–∞—Å—É. –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –º—ñ—Å—Ç–∏—Ç—å —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä—É –∑ –ø–æ–ª–µ–º –≤ —è–∫–æ–º—É –±—É–¥–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —á–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ü—å–æ–≥–æ –µ–∫–∑–µ–º–ø–ª—è—Ä—É, –∞ —Ç–∞–∫–æ–∂ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å –≤ —è–∫—É –±—É–¥–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —á–∞—Å –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –º–µ—Ç–æ–¥—É —è–∫–∏–π –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î –ø–æ–∑–∏—Ü—ñ—é
  class Vehicle {
    constructor({ id, latitude, longitude }) {
      this.id = id;
      this.status = "unavailable";
      this.setPosition({ latitude, longitude });
      this.time = Date.now(); // –ó–±–µ—Ä—ñ–≥–∞—î —á–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞
      this.positionTime = null; // c—é–¥–∏ –±—É–¥–µ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏—Å—è –∑–Ω–∞—á–µ–Ω–Ω—è —è–∫–µ –ø–æ–≤–µ—Ä—Ç–∞—î –º–µ—Ç–æ–¥ .setPosition
    }

    setPosition({ latitude, longitude }) {
      this.longitude = longitude;
      this.latitude = latitude;
      this.positionTime = Date.now(); // –ó–±–µ—Ä—ñ–≥–∞—î —á–∞—Å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó
    }

    getPosition() {
      return {
        latitude: this.latitude,
        longitude: this.longitude
      };
    }
    //* –∞ —Ç—É—Ç –º–µ—Ç–æ–¥ —è–∫–∏–π –±—É–¥–µ –¥–æ–¥–∞–≤–∞—Ç–∏ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å –¥–æ –µ–∫–∑–µ–º–ø–ª—è—Ä—É –∫–ª–∞—Å—É –ø—ñ—Å–ª—è –π–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è: (–°–ê–ú –ü–†–ò–î–£–ú–ê–í, –ù–Ü–•–¢–û –ù–ï –ü–Ü–î–ö–ê–ó–ê–í)
    addProperty({ property, value }) {
      this[property] = value;
      // –¢–ê–ö –†–û–ë–õ–Ø–¢–¨ –ì–ú–û!!!!!
    }
  }
  const car = new Vehicle("123");
  car.addProperty("color", "red");
  car.addProperty("VIN", 6546568498)
  console.log(car.id, car.color, car.VIN, typeof (car.addProperty), typeof (car), typeof (Vehicle)) // -> 123 red 6546568498 function object function
}
{// one step back to functions - functions in JS are first class citizens - the ability to store functions in variables
  {//function declared with a name - namedFunction
    function namedFunction() {
      console.log("I'm named, I hope ... ");
    }
    // below the anonnymousFunction variable holds a reference to a function
    let anonymousFunction = function () {
      console.log("I'm a bit anonymous ...");
    };
    // hehe here is a declaration of a named function, which we assign to the variable notExactlyAnonymousFunction:
    let notExactlyAnonymousFunction = function anotherNamedFunction() {
      console.log("I'm confused ...");
    };
    namedFunction(); // -> I'm named, I hope ...
    anonymousFunction(); // -> I'm a bit anonymous ...
    notExactlyAnonymousFunction(); // -> I'm confused ...F
  }
  // this is true for classes as well - we can declare a named class, as it shown in the previous examples, but also store unnamed ones in a variable
  {// let's declare it using a class expression - decpite being substituted for a variable, it is still a class, not an object üóø
    let AlmostEmptyClass = class {
      constructor(sth) {
        console.log(sth);
      }
      sayHi() {
        console.log("Hi!");
      }
    };
    let almostEmptyObject = new AlmostEmptyClass(120); // 120
    almostEmptyObject.sayHi(); // -> Hi!
    console.log(almostEmptyObject.constructor.name); // -> "AlmostEmptyClass"
  }
}
//+ JSE 2.1.3 The instance of operator
// –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –≤—ñ–¥ 24-04-2024
{ // –∑–∞–≤–¥–∞–Ω–Ω—è –ø–µ—Ä–µ–ø–∏—Å–∞—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –∫–ª–∞—Å —è–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
  function AlmostEmpty() {
    this.nothing = null;
    this.logger = function (aargh) {
      console.log(aargh);
    }
  }
  const wow = new AlmostEmpty();
  wow.logger("wow"); // -> wow
  console.log(wow.constructor.name) // -> "AlmostEmpty"
  console.log(almostEmptyObject instanceof AlmostEmptyClass); // -> true
  console.log(almostEmptyObject instanceof String); // -> false
  let str = new String("test me");
  console.log(str instanceof String); // -> true
  console.log(almostEmptyObject instanceof Object); // -> true
  // —Ü–µ —Ç–æ–º—É —â–æ –≤—Å—ñ –æ–±'—î–∫—Ç–∏ —â–æ —Å—Ç–≤–æ—Ä–µ–Ω—ñ –Ω–∞ –±–∞–∑—ñ –∫–ª–∞—Å—É —Ç–∞–∫–æ–∂ —ñ–º–ø–ª—ñ—Ü–∏—Ç–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω—ñ –∑ Object –∫–ª–∞—Å—É
  {
    let obj = new Object();
    console.log(Object.keys) // -> function keys() {[native code]}
  }
}
//+ JSE 2.2.3 Direct declaration inside the class body
{ //! –¶–µ–π –ø—Ä–∏–∫–ª–∞–¥ –∑ –∫—É—Ä—Å—É –º—ñ—Å—Ç–∏—Ç—å –±–∞–≥–∞—Ç–æ –ø–æ–º–∏–ª–æ–∫ - —Ü–µ –∫–∞–∂–µ –ø—ñ—Å–æ—á–Ω–∏—Ü—è –∫—É—Ä—Å—É, –π –ø–æ–≤–∏–Ω–µ–Ω —Å–ø—Ä–∏–π–º–∞—Ç–∏—Å—è —è–∫ –ø–æ—Ä–æ–∂–Ω–µ –º—ñ—Å—Ü–µ –±–æ —Ç–∞–∫ –¥–ª—è –≥–æ–ª–æ–≤–∏ –±–µ–∑–ø–µ—á–Ω—ñ—à–µ. –ê–ª–µ —É —Ç–µ—Å—Ç—ñ –Ω–∞ —Ü—é –ø—É—Ä–≥—É –±—É–¥—É—Ç—å –ø–∏—Ç–∞–Ω–Ω—è
  //! –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É —É –±—Ä–∞—É–∑–µ—Ä—ñ –≤–∏–¥–∞—î –ø–æ–º–∏–ª–∫—É - —Ü–µ–π –∫–æ–¥ –º–µ—Ä—Ç–≤–∏–π
  // Uncaught SyntaxError: Private field '#longitude' must be declared in an enclosing class
  class Vehicle {
    status = "unavailable"; // class properties must be methods expected ( but instead has =
    #longitude;
    #latitude;
    constructor({ id, latitude, longitude }) {
      this.id = id;
      this.setPosition({ latitude, longitude });
    }; // innecessary semicolon
    setPosition({ latitude, longitude }) {
      this.time = Date.now();
      this.#longitude = longitude; // Expected an identifier and instead saw '#'. Missing ';' before statement
      this.#latitude = latitude; // same error
    };
    getPosition() {
      return {
        latitude: this.#latitude, // Expected an identifier and instead saw "#". Expected '}' to match '{' from upper line and instead saw 'latitude' 
        longitude: this.#longitude
      };
    };
  };
  let vehicle = new Vehicle({ longitude: 18.213423, latitude: 59.367628, id: "AL1024" }); // a bunch of syntax errors
  console.log(vehicle.getPosition());
  console.log(vehicle.#longitude); // error
  //Property '#longitude' is not accessible outside class 'Vehicle' because it has a private identifier. - intended error
  //done –ø–æ—Ç—ñ–º –ø–æ–¥–∏–≤–ª—é—Å—è –Ω–∞ —Ü–µ —â–æ—Å—å –≤–æ–Ω–∏ –ø–µ—Ä–µ–º—É—Ç–∏–ª–∏
}
//+ JSE2 2.3.1 Getters and setters
{
  class Vehicle {
    constructor({ id, latitude, longitude }) {
      this.id = id;
      this.position = { latitude, longitude };
      this.status = "unavailable";
    }
    set position({ latitude, longitude }) {
      this.time = Date.now(); // –ø–æ—Ö–æ–¥—É —Ü–µ–π —á–∞—Å —Ç–∞–∫–æ–∂ –Ω—ñ–¥–µ –Ω–µ –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è
      this.longitude = longitude;
      this.latitude = latitude;
    }
    get position() {
      return {
        latitude: this.latitude,
        longitude: this.longitude
      };
    }
  }
  let vehicle = new Vehicle({ longitude: 18.213423, latitude: 59.367628, id: "AL1024" });
  vehicle.position = { longitude: 18.193121, latitude: 59.378654 };
  console.log(vehicle.position); // [object Object] - –¥—É–∂–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ –Ω–µ—è—Å–Ω–æ —â–æ –≤–æ–Ω–∏ —Ö–æ—Ç—ñ–ª–∏ —á–∏–º —Å–∫–∞–∑–∞—Ç–∏ - You should locate four major differences. –ü–æ–º—ñ—á–µ–Ω–æ 3 –Ω–µ–ø–æ—Ç—Ä—ñ–±–Ω–∏—Ö –∫—Ä–∞–ø–∫–∏ –∑ –∫–æ–º–æ—é —Ç–∞ –º–µ–Ω—à–µ –ø–æ–º–∏–ª–æ–∫ —É –∫–æ–Ω—Å–æ–ª—ñ. –ù—ñ—á–æ –Ω–µ –∑—Ä–æ–∑—É–º—ñ–ª–æ –π –Ω–µ –¥—É–∂–µ —Ü—ñ–∫–∞–≤–æ. –ó–Ω–∞–π–¥—ñ—Ç—å 4 –≤—ñ–¥–º—ñ–Ω–Ω–æ—Å—Ç—ñ —É –∫–æ–¥—ñ –∑ —Ä—ñ–∑–Ω–∏–º–∏ –ø–æ–º–∏–ª–∫–∞–º–∏.
}
//+ JSE2 2.4.4 Inheritance
{
  class Vehicle {
    constructor({ id, latitude, longitude }) {
      this.id = id;
      this.position = { latitude, longitude };
      this.status = "unavailable";
    }
    set position({ latitude, longitude }) {
      this.time = Date.now(); // –ø–æ—Ö–æ–¥—É —Ü–µ–π —á–∞—Å —Ç–∞–∫–æ–∂ –Ω—ñ–¥–µ –Ω–µ –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è
      this.longitude = longitude;
      this.latitude = latitude;
    }
    get position() {
      return {
        latitude: this.latitude,
        longitude: this.longitude
      };
    }
  }
  // –≤ –æ—Ä–∏–≥—ñ–Ω–∞–ª—ñ —Ç—É—Ç –ø–æ–º–∏–ª–∫–∞ —Å–ª–æ–≤–æ Class –∑ –≤–µ–ª–∏–∫–æ—ó
  class Bus extends Vehicle {
    constructor({ seats }) {
      super(seats); //* —Ü–µ–π —Ä—è–¥–æ–∫ –¥–æ–¥–∞–Ω–æ —â–æ–± –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–º–∏–ª–∫y ReferenceError
      this.seats = seats;
    }
  }
  // –≤ –æ—Ä–∏–≥—ñ–Ω–∞–ª—ñ –ø–æ–º–∏–ª–∫–∞ let bus = PassengerVehicle({seats: 40}) - –∞–≤–∂–µ–∂ —Ç–∞–∫–æ–≥–æ –∫–ª–∞—Å—É –Ω–µ –±—É–ª–æ –∑–∞–¥–µ–∫–ª–∞—Ä–æ–≤–∞–Ω–æ –ø–æ—Ö–æ–¥—É —Ü–µ –º—É—Ö–æ–º–æ—Ä–∏ –¥–ª—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–¥—ñ–Ω–≥—É - Uncaught ReferenceError: PassengerVehicle is not defined
  let bus = new Bus({ seats: 40 });
  console.log(bus.seats); // -> 40
  console.log(bus.id); // -> ! undefined
  //! —á–∏–º –≥–ª–∏–±—à–µ –≤ –∫—É—Ä—Å —Ç–∏–º –º—ñ—Ü–Ω—ñ—à–µ –∫–∞–∫—Ç—É—Å–∏. –£ —Ü—å–æ–º—É —Ä–æ–∑–¥—ñ–ª—ñ —Ç–∏–ø—É –Ω–∞–ø–∏—Å–∞–Ω–æ Let's correct this –π –ø—Ä–∏–≤–æ–¥–∏—Ç—å—Å—è —Ç–æ—á–Ω–∞ –∫–æ–ø—ñ—è –∫–æ–¥—É –∑ –ø—ñ–¥–ø–∏—Å–æ–º "It looks a little better". –í –º–µ–Ω–µ –ø–æ–≥–∞–Ω—ñ –Ω–æ–≤–∏–Ω–∏. –í–æ–Ω–æ –≤–∏–≥–ª—è–¥–∞—î —Ç–∞–∫ —Å–∞–º–æ.
  //! –°–ø—Ä–æ–±—É–≤–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Ü–µ –ª–∞–π–Ω–æ –π –∞–≤–∂–µ–∂ –æ—Ç—Ä–∏–º–∞–ª–∞
  //Uncaught ReferenceError: Must call super constructor in derived class before accessing 'this' or returning from derived constructor
  //* –ø—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è super(seats) –≤ –∫–æ–Ω—Ç—Ä—É–∫—Ç–æ—Ä –∞–≤—Ç–æ–±—É—Å–∞ –≤–∏—â–µ –ø–æ–º–∏–ª–∫–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∞
  //? —Ü–µ —Ç–∏–ø—É —â–æ–± —è –∫—Ä–∞—â–µ –∑–∞–ø–∞–º'—è—Ç–∞–ª–∞ –∞–ª–µ —Å—Ö–æ–∂–µ —â–æ –ø—ñ—Å–ª—è —Ç–∞–∫–∏—Ö –ø–æ—è—Å–Ω–µ–Ω—å —è –∑–Ω–∞—é –º–µ–Ω—à–µ –Ω—ñ–∂ –¥–æ –ø–æ—á–∞—Ç–∫—É
}
// –æ—Ä –≤–∏—â–µ –Ω–µ–±–∞ - –æ –Ω—ñ —Ç–∞–º –ø–æ–º–∏–ª–∫–∞ –Ω—ñ—á–æ –Ω–µ –ø—Ä–∞—Ü—é—î –¥–∞–≤–∞–π—Ç–µ –¥–æ–¥–∞–º–æ keyword super –π –¥–∞–ª—ñ –π–¥–µ –æ—Ü–µ
{
  class Vehicle {
    constructor({ id, latitude, longitude }) {
      this.id = id;
      this.position = { latitude, longitude };
      this.status = "unavailable";
    }
    set position({ latitude, longitude }) {
      this.time = Date.now(); // –ø–æ—Ö–æ–¥—É —Ü–µ–π —á–∞—Å —Ç–∞–∫–æ–∂ –Ω—ñ–¥–µ –Ω–µ –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è
      this.longitude = longitude;
      this.latitude = latitude;
    }
    get position() {
      return {
        latitude: this.latitude,
        longitude: this.longitude
      };
    }
  }
  class Bus extends Vehicle {
    constructor({ seats, id, latitude, longitude }) {
      super({ id, latitude, longitude });
      this.seats = seats;
    }
  }
  //–≤–∞–Ω–≥—É—é referrenceError Car is not defined
  //—Ç–∞–∫ –π –≤—ñ–¥–±—É–ª–æ—Å—è
  let bus = new Car({ seats: 4, longitude: 18.213423, latitude: 59.367628, id: "AL1024" });
  console.log(bus.seats); // -> 4 #–±—Ä–µ—Ö–Ω—è
  console.log(bus.id); // -> "AL1024" #–±—Ä–µ—Ö–Ω—è
}
// –Ω–∞—Å—Ç—É–ø–Ω–∞ —Å–ø—Ä–æ–±–∞ –ø–æ—Ñ—ñ–∫—Å–∏—Ç–∏ —Ü—ñ –ø—Ä–∏–∫–ª–∞–¥–∏ –≤–ª–∞—Å–Ω–æ—Ä—É—á
{
  class Vehicle {
    constructor({ id, latitude, longitude }) {
      this.id = id;
      this.position = { latitude, longitude };
      this.status = "unavailable";
    }
    set position({ latitude, longitude }) {
      this.time = Date.now(); // –ø–æ—Ö–æ–¥—É —Ü–µ–π —á–∞—Å —Ç–∞–∫–æ–∂ –Ω—ñ–¥–µ –Ω–µ –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è
      this.longitude = longitude;
      this.latitude = latitude;
    }
    get position() {
      return {
        latitude: this.latitude,
        longitude: this.longitude
      };
    }
  }
  class Bus extends Vehicle {
    constructor({ seats, id, latitude, longitude }) {
      super({ id, latitude, longitude });
      this.seats = seats;
    }
  }
  let bus = new Bus({ seats: 4, longitude: 18.213423, latitude: 59.367628, id: "AL1024" });
  console.log(bus.seats); // -> 4
  console.log(bus.id); // -> "AL1024"
}
//+ JSE2 2.4.2 Shadowing
{
  class AlmostEmptyClass {
    constructor(sth) {
      console.log(sth);
    };
    sayHi() {
      console.log("Hi!")
    };
  };
  class ExtendedClass extends AlmostEmptyClass {
    constructor(name) {
      super("I‚Äôm super ...");
      this.name = name;
    };
    sayHi() {
      console.log(`Hi ${this.name}!`);
    };
    newHi() {
      this.sayHi();
    }
    oldHi() {
      super.sayHi();
    };
  };
  let obj = new ExtendedClass("Bob"); // -> I‚Äôm super ...
  obj.sayHi();    // -> Hi Bob!
  obj.newHi();    // -> Hi Bob!
  obj.oldHi();    // Hi!
  // –Ω–∞ –¥–∏–≤–æ —Ç—É—Ç –≤—Å–µ –æ–∫
}
//+ JSE2 2.4.3 Inheritance from a constructor function
{ //—Ü—é —Ñ—É–Ω–∫—Ü—ñ—é –ø—Ä–æ–ø–æ–Ω—É—î—Ç—å—Å—è –ø–µ—Ä–µ—Ä–æ–±–∏—Ç–∏ —É –¥–µ–∫–ª–∞—Ä–∞—Ü—ñ—é –∫–ª–∞—Å—É –∞–ª–µ –Ω–∞–π –±—É–¥–µ —Ç–∞–∫
  let AlmostEmpty = function (sth) {
    console.log(sth);
    this.sayHi = function () {
      console.log("Hi!")
    };
  };
  //In this case, we treat the name of the constructor function as the name of the base class.
  class ExtendedClass extends AlmostEmpty {
    constructor(name) {
      super("I‚Äôm super ...");
      this.name = name;
    };
    sayHi() {
      console.log(`Hi ${this.name}!`);
    };
  };
  let obj = new ExtendedClass("Bob");
  obj.sayHi();    // -> Hi Bob!
}
//+ JSE2 2.5 Static members
{
  class AlmostEmptyClass {
    constructor(sth) {
      console.log(sth);
    };
    sayHi() {
      console.log("Hi!")
    };
    static sayHello() {
      console.log("Hello!")
    };
  };
  let almostEmptyObject = new AlmostEmptyClass(120); // 120
  almostEmptyObject.sayHi(); // -> Hi!
  almostEmptyObject.sayHello(); // error: Uncaught TypeError: almostEmptyObject.sayHello is not a function
  AlmostEmptyClass.sayHello(); // -> Hello! #–±—Ä–µ—Ö–Ω—è –Ω—ñ—á–æ –Ω–µ –ø–æ–∫–∞–∑—É—î

}
// —Ç—É—Ç —Å–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–µ—Ä–¥–∂—É—î—Ç—å—Å—è —â–æ —è –≤–≤–∞–∂–∞—é —Ü–µ –Ω–µ–¥–æ—Ü—ñ–ª—å–Ω–∏–º –∞ –ø–æ—Ç—ñ–º –º–µ–Ω—ñ –¥–æ–≤–æ–¥—è—Ç—å —â–æ —Ü—è —Ñ—ñ—á–∞ –¥–æ—Ü—ñ–ª—å–Ω–∞, —è –Ω–µ –º–æ–∂—É, –∑ –¥—Ä–∏–∂–∞–∫–∞–º–∏ —á–µ–∫–∞—é –Ω–∞ —Ç–µ—Å—Ç –ø–æ —Ü—å–æ–º—É —Ä–æ–∑–¥—ñ–ª—É
{ //–≤ –æ—Ä–∏–≥—ñ–Ω–∞–ª—ñ –∫–æ–¥—É –∫—É–ø–∞ –∑–∞–π–≤–∏—Ö ";" —É –¥–µ–∫–ª–∞—Ä–∞—Ü—ñ—ó –∫–ª–∞—Å—É
  class Vehicle {
    constructor({ id, latitude, longitude }) {
      this.id = id;
      this.status = "unavailable";
      this.setPosition({ latitude, longitude });
    }
    setPosition({ latitude, longitude }) {
      this.time = Date.now();
      this.longitude = longitude;
      this.latitude = latitude;
    }
    getPosition() {
      return {
        latitude: this.latitude,
        longitude: this.longitude
      };
    }
    static isSameId(v1, v2) {
      return v1.id === v2.id;
    }
  }
  // —Ç—É—Ç –≤ –æ—Ä–∏–≥—ñ–Ω–∞–ª—ñ –ø–æ–º–∏–ª–∫–∞ –≤ –∫–æ–¥—ñ - —Ç—Ä–∏—á—ñ –∑–∞–¥–µ–∫–ª–∞—Ä–æ–≤–∞–Ω–æ vehicle1 —Ö–æ—á–∞ —Ç–∞–º –º–∞—î –±—É—Ç–∏ vehicle1,2,3
  let vehicle1 = new Vehicle({ longitude: 18.213423, latitude: 59.367628, id: "AL1024" });
  let vehicle2 = new Vehicle({ longitude: 0, latitude: 0, id: "AL1024" });
  let vehicle3 = new Vehicle({ longitude: 18.213423, latitude: 59.367628, id: "AL1026" });
  // –¥–æ–¥–∞–Ω–æ console.log() —Ç–∞ –∑–º—ñ–Ω–µ–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥—Ä—É–≥–æ–≥–æ –≤–∏–∫–ª–∏–∫—É –∑ vehicle1, vehicle2 –Ω–∞ 1,3 –±–æ –ø–æ–≤–µ—Ä—Ç–∞—î true true —è–∫—â–æ –Ω—ñ—á–æ –Ω–µ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏
  console.log(Vehicle.isSameId(vehicle1, vehicle2)); // -> true
  console.log(Vehicle.isSameId(vehicle1, vehicle3)); // -> false
}
{
  //* –°—Ç–∞—Ç–∏—á–Ω–∏–π –º–µ—Ç–æ–¥ –∞–±–æ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å –º–æ–∂—É—Ç—å –±—É—Ç–∏ –≤–∏–∑–Ω–∞—á–µ–Ω—ñ –Ω–µ —Ç—ñ–ª—å–∫–∏ –≤ —Ç—ñ–ª—ñ –∫–ª–∞—Å—É –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ static. –¶–µ —Ç–∞–∫–æ–∂ –º–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏ –π –ø—ñ—Å–ª—è –¥–µ–∫–ª–∞—Ä–∞—Ü—ñ—ó –∫–ª–∞—Å—É —á–µ—Ä–µ–∑ —Ç–µ —â–æ —É JS –±—É–∫–≤–∞–ª—å–Ω–æ –≤—Å–µ –æ–∫—Ä—ñ–º –ø—Ä–∏–º—ñ—Ç–∏–≤—ñ–≤ —î –æ–±'—î–∫—Ç–∞–º–∏ - —Ç–æ–±—Ç–æ –∫–ª–∞—Å —Ü–µ —Ç–µ–∂ –æ–±'—î–∫—Ç
  //–¥–µ—Å—å —Ç—É—Ç –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –¥–µ–∫–ª–∞—Ä–∞—Ü—ñ—è –∫–ª–∞—Å—É Vehicle –∞–ª–µ –±–µ–∑ –º–µ—Ç–æ–¥—É .isSameId
  Vehicle.isSameId = function (v1, v2) {
    return v1.id === v2.id;
  };
  //—á–µ—Å–Ω–æ –∫–∞–∂—É—á–∏ —Ü–µ –≤–∏–≥–ª—è–¥–∞—î —è–∫ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ –¥–æ –æ–±'—î–∫—Ç—É –ø–æ—Ç—ñ–º –ø—ñ—Å–ª—è –π–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
}
//+ JSE2 2.6 Classes VS constructors
{  //* class
  class TestClass {
    constructor(arg) {
      this.arg = arg;
      console.log(this.arg);
    };

    showSth() {
      console.log("I'm prototyped!");
    };

    static showSth() {
      console.log(`Hi, I'm static!`);
    };
  };
  let test = new TestClass("Hello");
  test.showSth(); // -> I'm prototyped!
  TestClass.showSth(); // -> I'm static!
  console.log(test instanceof TestClass);
}
{//* constructor

  let Test = function (arg) {
    this.arg = arg;
    console.log(this.arg);
  };

  Test.prototype.showSth = function () {
    console.log("I'm prototyped!");
  };

  Test.showSth = function () {
    console.log(`Hi, I'm static!`);
  };
  let test = new Test("Hello");
  test.showSth(); // -> I'm prototyped!
  Test.showSth(); // -> I'm static!
  console.log(test instanceof Test);
}
{//* —Ç–∏–ø—É –ø–æ —ñ–Ω—à–æ–º—É –Ω–∞–ø–∏—Å–∞–Ω–∏–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä - –Ω–µ —â–æ–± –ø–æ—Ä—ñ–≤–Ω—é–≤–∞—Ç–∏ –∑ –∫–ª–∞—Å–æ–º, –∞ —è–∫ —Ç–∏–ø—É —Ç—Ä–µ–±–∞
  let Test = function (arg) {
    this.arg = arg;
    this.showSth = function () {
      console.log("I'm prototyped!");
    };
    console.log(this.arg);
  };

  Test.showSth = function () {
    console.log(`Hi, I'm static!`);
  };
}
//+ JSE2 2.7.1 Summary and labs
//* –¥—è–∫—É—é –∑–∞ –∑–∞–ø–µ–≤–Ω–µ–Ω–Ω—è —â–æ –∫–ª–∞—Å–∏ —É –¥–∂–∞–≤–∞—Å–∫—Ä–∏–ø—Ç—ñ –¥—É–∂–µ —Å–ø—Ä–æ—â–µ–Ω—ñ –ø–æ—Ä—ñ–≤–Ω—è–Ω–æ –∑ –°++ –∞–±–æ –¥–∂–∞–≤–æ–π —â–µ —Ä–∞–∑ —â–∏—Ä–æ –¥—è–∫—É—é (–∫–∞—Ä—Ç–∏–Ω–∫–∞ –∑ –®—Ä–µ–∫–æ–º)